{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RUB\\\\Desktop\\\\to program\\\\React\\\\food-order-app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amout === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/RUB/Desktop/to program/React/food-order-app/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","amout","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n   items: [],\r\n   totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n   if (action.type === \"ADD\") {\r\n      // const updatedItems = state.items.concat(action.item);\r\n      const updatedTotalAmount =\r\n         state.totalAmount + action.item.price * action.item.amount;\r\n\r\n      const existingCartItemIndex = state.items.findIndex(\r\n         (item) => item.id === action.item.id\r\n      );\r\n      const existingCartItem = state.items[existingCartItemIndex];\r\n      let updatedItems;\r\n\r\n      if (existingCartItem) {\r\n         const updatedItem = {\r\n            ...existingCartItem,\r\n            amount: existingCartItem.amount + action.item.amount,\r\n         };\r\n         updatedItems = [...state.items];\r\n         updatedItems[existingCartItemIndex] = updatedItem;\r\n      } else {\r\n         updatedItems = state.items.concat(action.item);\r\n      }\r\n\r\n      return {\r\n         items: updatedItems,\r\n         totalAmount: updatedTotalAmount,\r\n      };\r\n   }\r\n\r\n   if (action.type === \"REMOVE\") {\r\n      const existingCartItemIndex = state.items.findIndex(\r\n         (item) => item.id === action.id\r\n      );\r\n\r\n      const existingItem = state.items[existingCartItemIndex];\r\n      const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n      let updatedItems;\r\n      if (existingItem.amout === 1) {\r\n         updatedItems = state.items.filter((item) => item.id !== action.id);\r\n      } else {\r\n         const updatedItem = {\r\n            ...existingItem,\r\n            amount: existingItem.amount - 1,\r\n         };\r\n         updatedItems = [...state.items];\r\n         updatedItems[existingCartItemIndex] = updatedItem;\r\n      }\r\n\r\n      return {\r\n         items: updatedItems,\r\n         totalAmount: updatedTotalAmount,\r\n      };\r\n   }\r\n   return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n   const [cartState, dispatchCartAction] = useReducer(\r\n      cartReducer,\r\n      defaultCartState\r\n   );\r\n\r\n   const addItemToCartHandler = (item) => {\r\n      dispatchCartAction({ type: \"ADD\", item: item });\r\n   };\r\n\r\n   const removeItemFromCartHandler = (id) => {\r\n      dispatchCartAction({ type: \"REMOVE\", id: id });\r\n   };\r\n\r\n   const cartContext = {\r\n      items: cartState.items,\r\n      totalAmount: cartState.totalAmount,\r\n      addItem: addItemToCartHandler,\r\n      removeItem: removeItemFromCartHandler,\r\n   };\r\n\r\n   return (\r\n      <CartContext.Provider value={cartContext}>\r\n         {props.children}\r\n      </CartContext.Provider>\r\n   );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}